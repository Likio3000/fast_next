--- START FILE: README.md ---

--- END FILE: README.md ---
--- START FILE: .gitignore ---
# OS & IDE
.DS_Store
Thumbs.db
.vscode/
.idea/
*.swp
*~

# Python
__pycache__/
**/__pycache__/
*.py[cod]
*.pyo
*.pyd
*.so

# Python packaging
build/
dist/
*.egg-info/
*.egg
pip-wheel-metadata/

# Virtual environments
.venv/
venv/
backend/.venv/

# Environment variables
.env
.env.*
backend/.env

# Testing & Coverage
.pytest_cache/
coverage/
htmlcov/
.coverage
.coverage.*

# Logs
logs/
*.log

# Node.js
node_modules/
frontend/node_modules/

# Lock files
package-lock.json
yarn.lock
pnpm-lock.yaml

# Next.js
.next/
frontend/.next/
out/
frontend/out/
build/
frontend/build/
*.tsbuildinfo
next-env.d.ts

# Vercel
.vercel/
frontend/.vercel/

# Miscellaneous
*.pem

--- END FILE: .gitignore ---
--- START FILE: sc2.py ---
"""
sc2.py – collect the text source of a project into one big clipboard / file
         while honouring .gitignore and avoiding duplicate output.
"""

from __future__ import annotations

import argparse
import os
import sys
from pathlib import Path

# ---------- optional deps ---------- #
try:
    import pyperclip  # type: ignore
except ImportError:
    pyperclip = None
    print("Note: Clipboard functionality ('pyperclip') is not available. Install it with 'uv add pyperclip'.")


try:
    import pathspec  # type: ignore
except ImportError:
    pathspec = None
# ----------------------------------- #

# --------- user‑tweakable knobs -------- #
ALLOWED_EXTENSIONS = {
    ".py",
    ".js",
    ".jsx",
    ".ts",
    ".tsx",
    ".html",
    ".htm",
    ".css",
    ".scss",
    ".sass",
    ".json",
    ".yaml",
    ".yml",
    ".xml",
    ".md",
    ".txt",
    ".sh",
    ".bash",
    ".zsh",
    ".java",
    ".cs",
    ".cpp",
    ".c",
    ".h",
    ".hpp",
    ".go",
    ".rs",
    ".php",
    ".rb",
    ".sql",
}

ALLOWED_FILENAMES = {
    "dockerfile",
    "docker-compose.yml",
    ".env.example",
    ".gitignore",
    "requirements.txt",
    "package.json",
    "composer.json",
    "pom.xml",
    "gemfile",
}

EXCLUDED_DIRS = {
    ".git",
    ".svn",
    ".hg",
    "__pycache__",
    "node_modules",
    "vendor",
    "egg-info",
    "target",
    "build",
    "dist",
    "out",
    "bin",
    "obj",
    ".vscode",
    ".idea",
    ".next",
    ".venv",
    "venv",
    ".env",
    "env",
}
EXCLUDED_DIRS = {d.lower() for d in EXCLUDED_DIRS}

EXCLUDED_FILES = {
    ".env",
    "credentials.json",
    "secrets.yaml",
    "package-lock.json",
    "yarn.lock",
    "composer.lock",
}
EXCLUDED_FILES = {f.lower() for f in EXCLUDED_FILES}

MAX_FILE_SIZE_BYTES = 1 * 1024 * 1024  # 1 MiB
DEFAULT_OUTPUT_FILE = "sc2_output.txt"
# -------------------------------------- #


def load_gitignore(project_dir: Path):
    if not pathspec:
        return None
    gi_path = project_dir / ".gitignore"
    if gi_path.exists():
        with gi_path.open(encoding="utf-8", errors="ignore") as fh:
            return pathspec.PathSpec.from_lines("gitwildmatch", fh)
    return None


def collect_project_contents(
    project_dir: Path,
    exclude_extra: set[str] | None = None,
    verbose: bool = False,
):
    gitignore_spec = load_gitignore(project_dir)
    visited: set[str] = set()
    pieces: list[str] = []

    exclude_names = EXCLUDED_FILES.union({x.lower() for x in exclude_extra or set()})

    for root, dirs, files in os.walk(project_dir, topdown=True):
        # prune unwanted dirs in‑place
        dirs[:] = [d for d in dirs if d.lower() not in EXCLUDED_DIRS]

        for filename in files:
            rel_path = os.path.relpath(os.path.join(root, filename), project_dir)
            rel_lower = rel_path.lower()

            if rel_lower in visited:
                continue
            visited.add(rel_lower)

            if filename.lower() in exclude_names:
                continue

            ext = Path(filename).suffix.lower()
            if ext not in ALLOWED_EXTENSIONS and filename.lower() not in ALLOWED_FILENAMES:
                continue

            if gitignore_spec and gitignore_spec.match_file(rel_path):
                continue

            full_path = project_dir / rel_path
            try:
                if full_path.stat().st_size > MAX_FILE_SIZE_BYTES:
                    continue
            except OSError:
                continue

            try:
                with full_path.open("r", encoding="utf-8", errors="ignore") as fh:
                    content = fh.read()
            except Exception:
                continue

            pieces.append(f"--- START FILE: {rel_path} ---\n{content}\n--- END FILE: {rel_path} ---\n")

            if verbose:
                print("✓", rel_path)

    return "".join(pieces)


def main() -> None:
    ap = argparse.ArgumentParser(description="Copy project text files to clipboard / file")
    ap.add_argument("project_dir", nargs="?", default=".", help="Project directory (default: .)")
    ap.add_argument(
        "-w",
        "--write",
        nargs="?",
        const=DEFAULT_OUTPUT_FILE,
        metavar="FILE",
        help=f"write collected output to FILE (default: {DEFAULT_OUTPUT_FILE})",
    )
    ap.add_argument("-t", "--tests", action="store_true", help="include tests/ directory")
    ap.add_argument("-v", "--verbose", action="store_true", help="print every included file")
    ns = ap.parse_args()

    if not ns.tests:
        EXCLUDED_DIRS.add("tests")

    project_dir = Path(ns.project_dir).resolve()
    extra_excludes = {ns.write} if ns.write else set()

    output = collect_project_contents(project_dir, exclude_extra=extra_excludes, verbose=ns.verbose)

    if not output:
        print("No relevant files found – nothing copied.")
        sys.exit(1)

    # clipboard
    if pyperclip:
        try:
            pyperclip.copy(output)
            if ns.verbose:
                print(f"(copied {len(output):,} characters to clipboard)")
        except pyperclip.PyperclipException:
            if ns.verbose:
                print("Warning: could not access the system clipboard.")

    # optional file
    if ns.write:
        out_path = Path(ns.write).resolve()
        out_path.write_text(output, encoding="utf-8")
        print(f"Wrote {len(output):,} characters to {out_path}")

    if not ns.write and not pyperclip:
        # fall‑back: print to stdout if nowhere else
        print(output)


if __name__ == "__main__":
    main()

--- END FILE: sc2.py ---
--- START FILE: backend/app/__init__.py ---

--- END FILE: backend/app/__init__.py ---
--- START FILE: backend/app/main.py ---
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from agents import Agent, Runner, function_tool
import os, asyncio

app = FastAPI()

# Allow requests from the Next.js dev server
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Example Python function exposed as a tool
@function_tool
def get_current_year() -> int:
    """Return the current year."""
    from datetime import datetime
    return datetime.now().year

class ChatRequest(BaseModel):
    user_message: str

@app.post("/chat")
async def chat(req: ChatRequest):
    # Define a simple agent – fine for early development; you can optimize later
    assistant = Agent(
        name="Assistant",
        instructions="You are a helpful assistant. Use provided tools when helpful.",
        tools=[get_current_year],
        model="gpt-4.1-nano"  # CHOSEN MODEL CHODEN MODEL CHODEN MODEL CHOSEN MODEL
    )

    try:
        # Runner.run is async; returns an AgentResult with .final_output
        result = await Runner.run(assistant, input=req.user_message)
        return {"reply": result.final_output}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
--- END FILE: backend/app/main.py ---
--- START FILE: frontend/next.config.ts ---
// frontend/next.config.ts
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  /* any other options you already have */
  serverExternalPackages: ['browserslist'],
}

export default nextConfig

--- END FILE: frontend/next.config.ts ---
--- START FILE: frontend/README.md ---
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

--- END FILE: frontend/README.md ---
--- START FILE: frontend/package.json ---
{
  "name": "frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
  "dev": "next dev",
  "dev:turbo": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "^15.4.0-canary.20",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4.1.5",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "^15.4.0-canary.20",
    "postcss": "^8.5.3",
    "tailwindcss": "^4.1.5",
    "typescript": "^5"
  }
}

--- END FILE: frontend/package.json ---
--- START FILE: frontend/tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

--- END FILE: frontend/tsconfig.json ---
--- START FILE: frontend/next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.

--- END FILE: frontend/next-env.d.ts ---
--- START FILE: frontend/tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
export default {
    content:["./app/**/*.{js,ts,jsx,tsx,css}"],
    theme: {
      extend: {},
    },
    plugins: [],
  };
  
--- END FILE: frontend/tailwind.config.js ---
--- START FILE: frontend/app/page.tsx ---
// frontend/app/page.tsx
'use client';

import { useState } from 'react';

interface Message {
  role: 'user' | 'assistant';
  text: string;
}

export default function Home() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');

  const send = async () => {
    if (!input.trim()) return;
    const next = [...messages, { role: 'user', text: input }];
    setMessages(next);
    setInput('');

    const res = await fetch('http://localhost:8000/chat', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_message: input }),
    });

    const { reply } = await res.json();
    setMessages([...next, { role: 'assistant', text: reply }]);
  };

  return (
    <main className="flex flex-col h-screen p-4">
      <section className="flex-1 overflow-y-auto space-y-2">
        {messages.map((m, i) => (
          <p key={i} className={m.role === 'user' ? 'text-blue-500' : 'text-green-500'}>
            <strong>{m.role}:</strong> {m.text}
          </p>
        ))}
      </section>

      <section className="flex pt-4">
        <input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyDown={(e) => e.key === 'Enter' && send()}
          className="flex-1 border rounded p-2"
          placeholder="Ask me anything…"
        />
        <button onClick={send} className="ml-2 border rounded px-3">
          Send
        </button>
      </section>
    </main>
  );
}

--- END FILE: frontend/app/page.tsx ---
--- START FILE: frontend/app/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

--- END FILE: frontend/app/globals.css ---
--- START FILE: frontend/app/layout.tsx ---
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

--- END FILE: frontend/app/layout.tsx ---
